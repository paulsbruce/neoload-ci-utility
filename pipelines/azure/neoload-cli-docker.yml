trigger: none

pool:
  vmImage: 'ubuntu-16.04'

variables:
  nlw_token: $(secret_nlw_token)
  zone_code: 9h2lZ
  workspace: Team A
  nlw_test_name: Azure_sidecars
  MAX_SLA_FAILURE_PERCENT: 25
  PYTHONUNBUFFERED: 1

# create sidecar containers, attach them to a zone; provide supply this pipeline demands
resources:
  containers:
  - container: neoload_ctrl
    image: neotys/neoload-controller:latest
    env: { MODE: Managed, NEOLOADWEB_TOKEN: $(nlw_token), ZONE: $(zone_code) }
  - container: lg1
    image: neotys/neoload-loadgenerator:latest
    env: { NEOLOADWEB_TOKEN: $(nlw_token), ZONE: $(zone_code), LG_HOST=lg1, LG_PORT=7101, AGENT_SERVER_PORT=7101 }
  - container: lg2
    image: neotys/neoload-loadgenerator:latest
    env: { NEOLOADWEB_TOKEN: $(nlw_token), ZONE: $(zone_code), LG_HOST=lg2, LG_PORT=7102, AGENT_SERVER_PORT=7102 }

jobs:
- job: RunLoadTest
  displayName: Run NeoLoad Test
  services:
    neoload_ctrl: neoload_ctrl
    lg1: lg1
    lg2: lg2
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'

  - task: Bash@3
    displayName: Install and Configure NeoLoad
    continueOnError: false
    inputs:
      targetType: 'inline'
      script: |
        pip install -q neoload==1.1.0
        neoload --version
        neoload login --workspace "$(workspace)" $(nlw_token)

  - task: Bash@3
    displayName: Configure and Upload Project
    continueOnError: false
    inputs:
      targetType: 'inline'
      script: |
        cd $(Build.SourcesDirectory)

        neoload test-settings --zone $(zone_code) --lgs 2 --scenario sanityScenario patch "$(nlw_test_name)" \
                project --path example_test/ upload "$(nlw_test_name)"
        
  - task: Bash@3
    displayName: Run NeoLoad Test
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        cd $(Build.SourcesDirectory)

        neoload run \
                       --detached
                       --web-vu 50 \
                       --as-code default.yaml,slas/uat.yaml \
                       --name "AzureBuild_$(Build.BuildNumber)" \
                       --description "Azure example with meta; $(Build.BuildUri)" \
                       "$(nlw_test_name)"
        
        neoload fastfail --max-failure $(MAX_SLA_FAILURE_PERCENT) slas cur
  - task: Bash@3
    displayName: Get the junit SLA report
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        neoload test-results --junit-file $(Common.TestResultsDirectory)/neoload-slas.xml junitsla

        #sudo apt-get install jq #jq already installed on ubuntu build agent

        # change <br/> to newlines for Azure output, also insert the NeoLoad report url in each SLA failure
        RESULT_ID=$(neoload test-results ls cur | jq --raw-output '.id')
        RESULT_URL=$(neoload logs-url $RESULT_ID)
        sed -i -e $'s/\&lt\;br\/\&gt\;/\\\n/g' $(Common.TestResultsDirectory)/neoload-slas.xml
        sed -i -e $'s/\>Container\:/\>Full test results\: _RESULT_URL_ \\\n\\\nContainer\:/g' $(Common.TestResultsDirectory)/neoload-slas.xml
        sed -i -e "s|_RESULT_URL_|$RESULT_URL|g" $(Common.TestResultsDirectory)/neoload-slas.xml
        cat $(Common.TestResultsDirectory)/neoload-slas.xml

  - task: Bash@3
    displayName: Report Controller Logs
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        CTRL_ID=$(docker ps --filter "name=neoload_ctrl" --format "{{.ID}}")
        NL_USER_DIR=/home/neoload/.neotys/neoload
        NL_VERSION=$(docker exec -t $CTRL_ID find $NL_USER_DIR -maxdepth 1 -type d -name 'v*.*' -exec basename {} ';' | tr -d '\n' | tr -d '\r')
        docker cp $CTRL_ID:$NL_USER_DIR/$NL_VERSION/logs/ $(Common.TestResultsDirectory)
        cat $(Common.TestResultsDirectory)/logs/neoload.log

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: $(Common.TestResultsDirectory)/neoload-slas.xml
      failTaskOnFailedTests: true
